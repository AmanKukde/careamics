experiment_name: test
workdir: /home/igor.zubarev/projects/DecoNoising/

#TODO add nested config & 
algorithm: 
  name: n2v
  #List of class names from losses.py or pytorch
  loss: [n2v]
  # Pixel masking strategy #TODO add better description
  pixel_manipulation: n2v
  # Number of pixels to mask. Defaul is patch size ** number of patch dims / 32
  num_masked_pixels: 128
  #Class name from models.py
  model: UNet
  #Whether to use 2D or 3D convolutions #TODO better name ?
  conv_mult: 2
  depth: 3
  checkpoint: checkpoint.pth

training:
  num_epochs: 3
  learning_rate: 0.0001
  optimizer:
    #Name of the optimizer class from torch.optim
    name: Adam
    parameters:
      lr: 0.0001
  lr_scheduler: 
    #Name of the scheduler class from torch.optim.lr_scheduler
    name: ReduceLROnPlateau
    parameters:
      mode: min
      factor: 0.1
      patience: 5
      verbose: true
      threshold: 0.0001
      threshold_mode: rel
      cooldown: 0
      min_lr: 0
  # Toggles automatic mixed precision training
  amp: 
    toggle: false
    # Scaling parameter for mixed precision training. Power of 2 recommended
    init_scale: 1024
  max_grad_norm: 1
  data:
    #Path to the data
    path: /home/igor.zubarev/data/paris_chunk
    # File type to load
    ext: tif
    #Number of files to read. Read all if None
    num_files: 2
    # Patch generation strategy [random, sequential]
    extraction_strategy: sequential
    #Patch shape in (z)yx. 2D or 3D
    patch_size: &PS [64, 64]
    #Total number of patches to generate. Only applicable for random patching
    num_patches: Null
    # Batch size
    batch_size: 8
    #Num workers parameter for data loader
    num_workers: 0
    #TODO add list of specific augmentations or func/list of funcs 
    augmentation: Null
  

evaluation:
  data:
    #Path to the data
    path: /home/igor.zubarev/data/paris_chunk
    # File type to load
    ext: tif
    #Number of files to read. Read all if None
    num_files: 1
    # Patch generation strategy [random, sequential]
    extraction_strategy: sequential
    #Patch shape in (z)yx. 2D or 3D
    patch_size: *PS
    #Total number of patches to generate. Only applicable for random patching
    num_patches: Null
    # Batch size
    batch_size: 1
    #Num workers parameter for data loader
    num_workers: 0
    batch_size: 1
    num_workers: 0
    augmentation: Null
  metric: psnr


prediction:
  data:
    #Path to the data
    path: /home/igor.zubarev/data/paris_chunk
    # File type to load
    ext: tif
    #Number of files to read. Read all if None
    num_files: 1
    # Patch generation strategy [predict]
    extraction_strategy: predict
    #Patch shape in (z)yx. 2D or 3D. 1 for each dimension for prediction on full image
    patch_size: [1, 1]
    # Batch size
    batch_size: 1
    #Num workers parameter for data loader
    num_workers: 0
    batch_size: 1
    #test-time augmentation
    tta: Null
  #Tuple of overlap values for each dimension between patches in pixels (should be half of the network receptive field)
  overlap: [16, 16] 
  metric: psnr


misc:
  use_wandb: Null